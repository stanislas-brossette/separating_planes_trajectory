#include <iostream>

#include <boost/test/unit_test.hpp>

#include <Eigen/Core>

#include <feet-trajectory/utils/Jerk3DIntegrator.hh>

using namespace feettrajectory;

BOOST_AUTO_TEST_CASE(testJerk3DIntegrator)
{
  Jerk3DIntegrator integ(0.1, 4);
  Eigen::MatrixXd Ux, Uu, SelPos, SelVel, SelAcc;
  Ux.resize(36, 9);
  Ux << 1, 0, 0, 0.1, 0, 0, 0.005, 0, 0,  0, 1, 0, 0, 0.1, 0, 0, 0.005, 0,  0, 0, 1, 0, 0, 0.1, 0, 0, 0.005,  0, 0, 0, 1, 0, 0, 0.1, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0.1, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0.1,  0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1,  1, 0, 0, 0.2, 0, 0, 0.02, 0, 0,  0, 1, 0, 0, 0.2, 0, 0, 0.02, 0,  0, 0, 1, 0, 0, 0.2, 0, 0, 0.02,  0, 0, 0, 1, 0, 0, 0.2, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0.2, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0.2,  0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1,  1, 0, 0, 0.3, 0, 0, 0.045, 0, 0,  0, 1, 0, 0, 0.3, 0, 0, 0.045, 0,  0, 0, 1, 0, 0, 0.3, 0, 0, 0.045,  0, 0, 0, 1, 0, 0, 0.3, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0.3, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0.3,  0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1,  1, 0, 0, 0.4, 0, 0, 0.08, 0, 0,  0, 1, 0, 0, 0.4, 0, 0, 0.08, 0,  0, 0, 1, 0, 0, 0.4, 0, 0, 0.08,  0, 0, 0, 1, 0, 0, 0.4, 0, 0,  0, 0, 0, 0, 1, 0, 0, 0.4, 0,  0, 0, 0, 0, 0, 1, 0, 0, 0.4,  0, 0, 0, 0, 0, 0, 1, 0, 0,  0, 0, 0, 0, 0, 0, 0, 1, 0,  0, 0, 0, 0, 0, 0, 0, 0, 1;
  Uu.resize(36, 12);
  Uu << 0.000166667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0.000166667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0.000166667, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0.005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0.005, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.00116667, 0, 0, 0.000166667, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0.00116667, 0, 0, 0.000166667, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0.00116667, 0, 0, 0.000166667, 0, 0, 0, 0, 0, 0,  0.015, 0, 0, 0.005, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0.015, 0, 0, 0.005, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0.015, 0, 0, 0.005, 0, 0, 0, 0, 0, 0,  0.1, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0.1, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0.1, 0, 0, 0.1, 0, 0, 0, 0, 0, 0,  0.00316667, 0, 0, 0.00116667, 0, 0, 0.000166667, 0, 0, 0, 0, 0,  0, 0.00316667, 0, 0, 0.00116667, 0, 0, 0.000166667, 0, 0, 0, 0,  0, 0, 0.00316667, 0, 0, 0.00116667, 0, 0, 0.000166667, 0, 0, 0,  0.025, 0, 0, 0.015, 0, 0, 0.005, 0, 0, 0, 0, 0,  0, 0.025, 0, 0, 0.015, 0, 0, 0.005, 0, 0, 0, 0,  0, 0, 0.025, 0, 0, 0.015, 0, 0, 0.005, 0, 0, 0,  0.1, 0, 0, 0.1, 0, 0, 0.1, 0, 0, 0, 0, 0,  0, 0.1, 0, 0, 0.1, 0, 0, 0.1, 0, 0, 0, 0,  0, 0, 0.1, 0, 0, 0.1, 0, 0, 0.1, 0, 0, 0,  0.00616667, 0, 0, 0.00316667, 0, 0, 0.00116667, 0, 0, 0.000166667, 0, 0,  0, 0.00616667, 0, 0, 0.00316667, 0, 0, 0.00116667, 0, 0, 0.000166667, 0,  0, 0, 0.00616667, 0, 0, 0.00316667, 0, 0, 0.00116667, 0, 0, 0.000166667,  0.035, 0, 0, 0.025, 0, 0, 0.015, 0, 0, 0.005, 0, 0,  0, 0.035, 0, 0, 0.025, 0, 0, 0.015, 0, 0, 0.005, 0,  0, 0, 0.035, 0, 0, 0.025, 0, 0, 0.015, 0, 0, 0.005,  0.1, 0, 0, 0.1, 0, 0, 0.1, 0, 0, 0.1, 0, 0,  0, 0.1, 0, 0, 0.1, 0, 0, 0.1, 0, 0, 0.1, 0,  0, 0, 0.1, 0, 0, 0.1, 0, 0, 0.1, 0, 0, 0.1;
  SelPos.resize(12, 36);
  SelPos << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0;
  SelVel.resize(12, 36);
  SelVel << 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0;
  SelAcc.resize(12, 36);
  SelAcc << 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;

  BOOST_CHECK(Ux.isApprox(integ.Ux()));
  BOOST_CHECK(Uu.isApprox(integ.Uu(), 1e-3));
  BOOST_CHECK(SelPos.isApprox(integ.SelPos()));
  BOOST_CHECK(SelVel.isApprox(integ.SelVel()));
  BOOST_CHECK(SelAcc.isApprox(integ.SelAcc()));
}

BOOST_AUTO_TEST_CASE(testPosVelAcc)
{
  unsigned long n = 5;
  Eigen::VectorXd x0(9), u(n*3), pos(n*3), vel(n*3), acc(n*3);
  x0.setConstant(1);
  u.setConstant(1);
  Jerk3DIntegrator integ(1, n);
  Eigen::VectorXd expPos(n*3), expVel(n*3), expAcc(n*3);
  expAcc << 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6;
  expVel << 2.5, 2.5, 2.5, 5, 5, 5, 8.5, 8.5, 8.5, 13, 13, 13, 18.5, 18.5, 18.5;
  expPos << 2.66667, 2.66667, 2.66667, 6.33333, 6.33333, 6.33333, 13, 13, 13,
      23.6667, 23.6667, 23.6667, 39.3333, 39.3333, 39.3333;
  integ.getAcc(acc, u, x0);
  integ.getVel(vel, u, x0);
  integ.getPos(pos, u, x0);

  BOOST_CHECK(expPos.isApprox(pos, 1e-3));
  BOOST_CHECK(expVel.isApprox(vel));
  BOOST_CHECK(expAcc.isApprox(acc));

}


BOOST_AUTO_TEST_CASE(testJerkFromPos)
{
  unsigned long n = 5;
  Jerk3DIntegrator integ(1, n);

  Eigen::VectorXd x0(9), u(n*3), pos(n*3), vel(n*3), acc(n*3);
  x0.setConstant(0);

  pos.segment(0,3).setConstant(1);
  pos.segment(3,3).setConstant(2);
  pos.segment(6,3).setConstant(3);
  pos.segment(9,3).setConstant(4);
  pos.segment(12,3).setConstant(5);

  integ.jerkFromPos(u, pos, x0);

  Eigen::VectorXd expU(n*3);
  expU << 6, 6, 6, -30, -30, -30, 114, 114, 114, -426, -426, -426, 1590, 1590,
      1590;
  BOOST_CHECK(expU.isApprox(u));
}
